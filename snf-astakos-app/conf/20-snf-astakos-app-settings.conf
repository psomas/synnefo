# Set the expiration time of newly created auth tokens
# to be this many hours after their creation time.
#ASTAKOS_AUTH_TOKEN_DURATION = 30 * 24

#ASTAKOS_DEFAULT_USER_LEVEL = 4

#ASTAKOS_INVITATIONS_PER_LEVEL = {
#    0   :   100,
#    1   :   2,
#    2   :   0,
#    3   :   0,
#    4   :   0
#}

# Identity Management enabled modules
# Supported modules are: 'local', 'twitter' and 'shibboleth'
#ASTAKOS_IM_MODULES = ['local']

# Force user profile verification
#ASTAKOS_FORCE_PROFILE_UPDATE = True

#Enable invitations
#ASTAKOS_INVITATIONS_ENABLED = False

#ASTAKOS_COOKIE_NAME = '_pithos2_a'
#ASTAKOS_COOKIE_DOMAIN = None
#ASTAKOS_COOKIE_SECURE = True

#ASTAKOS_IM_STATIC_URL = '/static/im/'

# If set to False and invitations not enabled newly created user will be 
# automatically accepted
#ASTAKOS_MODERATION_ENABLED = True

# Set baseurl
#ASTAKOS_BASE_URL = 'https://accounts.example.synnefo.org'

# Set service name
#ASTAKOS_SITENAME = 'Synnefo Cloud'

# Set recaptcha keys
# http://www.google.com/recaptcha/whyrecaptcha 
#ASTAKOS_RECAPTCHA_PUBLIC_KEY = ''
#ASTAKOS_RECAPTCHA_PRIVATE_KEY = ''
#ASTAKOS_RECAPTCHA_OPTIONS = {'theme': 'custom', 'custom_theme_widget': 'okeanos_recaptcha'}
#ASTAKOS_RECAPTCHA_USE_SSL = True
#ASTAKOS_RECAPTCHA_ENABLED = False

# Set where the user should be redirected after logout
#ASTAKOS_LOGOUT_NEXT = ''

# Set user email patterns that are automatically activated
#ASTAKOS_RE_USER_EMAIL_PATTERNS = []

# Messages to display on login page header
# e.g. [('warning', 'This warning message will be displayed on the top of login page')]
#ASTAKOS_LOGIN_MESSAGES = []

# Messages to display on signup page header
# e.g. [('warning', 'This warning message will be displayed on the top of signup page')]
#ASTAKOS_SIGNUP_MESSAGES = []

# Messages to display on profile page header
# e.g. [('warning', 'This warning message will be displayed on the top of profile pages')]
#ASTAKOS_PROFILE_MESSAGES = []

# Messages to display on global page header
# e.g. [('warning', 'This warning message will be displayed on the top of all pages')]
#ASTAKOS_GLOBAL_MESSAGES = []

# messages to display as extra actions in account forms
# e.g. {'https://cms.example.synnefo.org/': 'Back to Synnefo'}
#ASTAKOS_PROFILE_EXTRA_LINKS = []

# The number of unsuccessful login requests per minute allowed for a specific email
#ASTAKOS_RATELIMIT_RETRIES_ALLOWED = 3

# If False the email change mechanism is disabled
#ASTAKOS_EMAILCHANGE_ENABLED = False

# Set the expiration time (in days) of email change requests
#ASTAKOS_EMAILCHANGE_ACTIVATION_DAYS = 10

# Set the astakos main functions logging severity (None to disable)
#from logging import INFO
#ASTAKOS_LOGGING_LEVEL = INFO

# Set how many objects should be displayed per page
#ASTAKOS_PAGINATE_BY = 10
# Set how many objects should be displayed per page in show all groups page
#ASTAKOS_PAGINATE_BY_ALL = 15

# Enforce token renewal on password change/reset
#ASTAKOS_NEWPASSWD_INVALIDATE_TOKEN = True

# Interval at which to update the user's available quota in astakos usage 
# profile view
#ASTAKOS_USAGE_UPDATE_INTERVAL = 5000

# Permit local account migration
#ASTAKOS_ENABLE_LOCAL_ACCOUNT_MIGRATION = True

# Strict shibboleth usage
#ASTAKOS_SHIBBOLETH_REQUIRE_NAME_INFO = False

# If true, this enables a ui compatibility layer for the introduction
# of UUIDs in identity management.
# WARNING: Setting to True will break your installation.
# ASTAKOS_TRANSLATE_UUIDS = False

# UUIDs of users that can approve or deny project applications from the web.
# ASTAKOS_PROJECT_ADMINS = set() # e.g. set(['01234567-89ab-cdef-0123-456789abcdef'])

# OAuth2 Twitter credentials.
#ASTAKOS_TWITTER_KEY = ''
#ASTAKOS_TWITTER_SECRET = ''
#ASTAKOS_TWITTER_AUTH_FORCE_LOGIN = False

# OAuth2 Google credentials
#ASTAKOS_GOOGLE_CLIENT_ID = ''
#ASTAKOS_GOOGLE_SECRET = ''

# OAuth2 LinkedIn credentials.
#ASTAKOS_LINKEDIN_TOKEN = ''
#ASTAKOS_LINKEDIN_SECRET = ''

# A way to extend the components presentation metadata
# ASTAKOS_COMPONENTS_META = {}

# A way to extend the resources presentation metadata
# ASTAKOS_RESOURCES_META = {}

# Migrate existing shibboleth user entries which where previously associated 
# with EPPN instead of the provided value of REMOTE_ID mod_shib2 header.
# ASTAKOS_SHIBBOLETH_MIGRATE_EPPN = False
#
## Astakos groups that have access to '/admin' views.
# ASTAKOS_ADMIN_STATS_PERMITTED_GROUPS = ["admin-stats"]

## Timeout in seconds for caching endpoints in POST /tokens
# ASTAKOS_ENDPOINT_CACHE_TIMEOUT = 60

## Timeout in seconds for caching visible resources in GET /quotas
# ASTAKOS_RESOURCE_CACHE_TIMEOUT = 60

## Astakos groups that have access to users admin api endpoints
# ASTAKOS_ADMIN_STATS_PERMITTED_GROUPS = ["admin-stats"]

## A dictionary describing the additional user fields appearing during the second step of third party account creation
# THIRDPARTY_ACC_ADDITIONAL_FIELDS = getattr(settings, 'ASTAKOS_THIRDPARTY_ACC_ADDITIONAL_FIELDS', {
#     'first_name':None,
#     'last_name':None,
# })

## Enable LDAP / AD authentication
# AUTHENTICATION_BACKENDS = ['astakos.im.auth_ldap.backend.LDAPBackend'] + list(AUTHENTICATION_BACKENDS)

## LDAP authentication backend (django-auth-ldap) configuration
## For more information / documentation, see:
## http://packages.python.org/django-auth-ldap/
# import ldap
# from astakos.im.auth_ldap.config import LDAPSearch
# AUTH_LDAP_SERVER_URI = "ldap(s)://host:port"
## Uncomment if you (want to) use STARTTLS instead of ldaps://
# AUTH_LDAP_START_TLS = True

## If anon search is disallowed, specify bind dn and password
# AUTH_LDAP_BIND_DN = ""
# AUTH_LDAP_BIND_PASSWORD = ""

## LDAP search conf
## Example search for AD:
# AUTH_LDAP_USER_SEARCH = LDAPSearch(subtree_dn, ldap.SCOPE_SUBTREE, "(userPrincipalName=%(user)s)")
## Example search for LDAP
## NOTE: Use email instead of uid, since astakos requires a valid and unique
## email address for every user. See astakos docs for more information
# AUTH_LDAP_USER_SEARCH = LDAPSearch(subtree_dn, ldap.SCOPE_SUBTREE, "(uid=%(mail)s)")

## LDAP group configuration
# from astakos.im.auth_ldap.config import GroupOfNamesType

## LDAP group search conf
# AUTH_LDAP_GROUP_SEARCH = LDAPSearch(subtree_dn, ldap.SCOPE_SUBTREE, "(objectClass=groupOfNames)")
# AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

## Allow only users belonging to a specific group to login
# AUTH_LDAP_REQUIRE_GROUP = group_dn

## Specify the map between ldap attrs and astakos user attrs
## Default mapping:
# AUTH_LDAP_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn", "email": "mail"}

## Automatically set users belonging to a specific group as active
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#    "is_active": group_dn,
#    "is_admin": admin_group_dn
# }

## Update user information from LDAP on every login.
## Deafults to False for the time being to prevent confusing astakos on email changes.
# AUTH_LDAP_ALWAYS_UPDATE_USER = False
